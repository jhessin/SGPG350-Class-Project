//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServerTicTacToe.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.TicTacToe", CallbackContract=typeof(ServerTicTacToe.ServiceReference2.TicTacToeCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface TicTacToe {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/TicTacToe/SetServerCallback")]
        void SetServerCallback();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/TicTacToe/SetServerCallback")]
        System.Threading.Tasks.Task SetServerCallbackAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/TicTacToe/Mark")]
        void Mark(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/TicTacToe/Mark")]
        System.Threading.Tasks.Task MarkAsync(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/TicTacToe/Reset")]
        void Reset();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/TicTacToe/Reset")]
        System.Threading.Tasks.Task ResetAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TicTacToeCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/TicTacToe/Progress")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Service.GameBoard))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Service.GameMark))]
        void Progress(string format, object[] args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/TicTacToe/UpdateBoard")]
        void UpdateBoard(Service.GameBoard board);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/TicTacToe/SetSymbol")]
        void SetSymbol(Service.GameMark symbol);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/TicTacToe/SetTurn")]
        void SetTurn(Service.GameMark symbol);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/TicTacToe/Winner")]
        void Winner(Service.GameMark winMark);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TicTacToeChannel : ServerTicTacToe.ServiceReference2.TicTacToe, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TicTacToeClient : System.ServiceModel.DuplexClientBase<ServerTicTacToe.ServiceReference2.TicTacToe>, ServerTicTacToe.ServiceReference2.TicTacToe {
        
        public TicTacToeClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TicTacToeClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TicTacToeClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TicTacToeClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TicTacToeClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SetServerCallback() {
            base.Channel.SetServerCallback();
        }
        
        public System.Threading.Tasks.Task SetServerCallbackAsync() {
            return base.Channel.SetServerCallbackAsync();
        }
        
        public void Mark(int x, int y) {
            base.Channel.Mark(x, y);
        }
        
        public System.Threading.Tasks.Task MarkAsync(int x, int y) {
            return base.Channel.MarkAsync(x, y);
        }
        
        public void Reset() {
            base.Channel.Reset();
        }
        
        public System.Threading.Tasks.Task ResetAsync() {
            return base.Channel.ResetAsync();
        }
    }
}
