//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tic_Tac_Toe.TicTacToeService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameMark", Namespace="http://schemas.datacontract.org/2004/07/TicTacToe.Service")]
    public enum GameMark : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        X = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        O = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Draw = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameBoard", Namespace="http://schemas.datacontract.org/2004/07/TicTacToe.Service")]
    [System.SerializableAttribute()]
    public partial struct GameBoard : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BottomLeftField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BottomMidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BottomRightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MidLeftField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MidMidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MidRightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TopLeftField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TopMidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TopRightField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BottomLeft {
            get {
                return this.BottomLeftField;
            }
            set {
                if ((object.ReferenceEquals(this.BottomLeftField, value) != true)) {
                    this.BottomLeftField = value;
                    this.RaisePropertyChanged("BottomLeft");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BottomMid {
            get {
                return this.BottomMidField;
            }
            set {
                if ((object.ReferenceEquals(this.BottomMidField, value) != true)) {
                    this.BottomMidField = value;
                    this.RaisePropertyChanged("BottomMid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BottomRight {
            get {
                return this.BottomRightField;
            }
            set {
                if ((object.ReferenceEquals(this.BottomRightField, value) != true)) {
                    this.BottomRightField = value;
                    this.RaisePropertyChanged("BottomRight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MidLeft {
            get {
                return this.MidLeftField;
            }
            set {
                if ((object.ReferenceEquals(this.MidLeftField, value) != true)) {
                    this.MidLeftField = value;
                    this.RaisePropertyChanged("MidLeft");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MidMid {
            get {
                return this.MidMidField;
            }
            set {
                if ((object.ReferenceEquals(this.MidMidField, value) != true)) {
                    this.MidMidField = value;
                    this.RaisePropertyChanged("MidMid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MidRight {
            get {
                return this.MidRightField;
            }
            set {
                if ((object.ReferenceEquals(this.MidRightField, value) != true)) {
                    this.MidRightField = value;
                    this.RaisePropertyChanged("MidRight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TopLeft {
            get {
                return this.TopLeftField;
            }
            set {
                if ((object.ReferenceEquals(this.TopLeftField, value) != true)) {
                    this.TopLeftField = value;
                    this.RaisePropertyChanged("TopLeft");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TopMid {
            get {
                return this.TopMidField;
            }
            set {
                if ((object.ReferenceEquals(this.TopMidField, value) != true)) {
                    this.TopMidField = value;
                    this.RaisePropertyChanged("TopMid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TopRight {
            get {
                return this.TopRightField;
            }
            set {
                if ((object.ReferenceEquals(this.TopRightField, value) != true)) {
                    this.TopRightField = value;
                    this.RaisePropertyChanged("TopRight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="TicTacToe.Service", ConfigurationName="TicTacToeService.TicTacToe", CallbackContract=typeof(Tic_Tac_Toe.TicTacToeService.TicTacToeCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface TicTacToe {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="TicTacToe.Service/TicTacToe/Register")]
        void Register();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="TicTacToe.Service/TicTacToe/Register")]
        System.Threading.Tasks.Task RegisterAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="TicTacToe.Service/TicTacToe/Mark")]
        void Mark(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="TicTacToe.Service/TicTacToe/Mark")]
        System.Threading.Tasks.Task MarkAsync(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="TicTacToe.Service/TicTacToe/Reset")]
        void Reset();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="TicTacToe.Service/TicTacToe/Reset")]
        System.Threading.Tasks.Task ResetAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TicTacToeCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="TicTacToe.Service/TicTacToe/Progress")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Tic_Tac_Toe.TicTacToeService.GameMark))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Tic_Tac_Toe.TicTacToeService.GameBoard))]
        void Progress(string format, object[] args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="TicTacToe.Service/TicTacToe/SetPlayerMark")]
        void SetPlayerMark(Tic_Tac_Toe.TicTacToeService.GameMark mark);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="TicTacToe.Service/TicTacToe/UpdateBoard")]
        void UpdateBoard(Tic_Tac_Toe.TicTacToeService.GameBoard board);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="TicTacToe.Service/TicTacToe/SetTurn")]
        void SetTurn(Tic_Tac_Toe.TicTacToeService.GameMark symbol);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="TicTacToe.Service/TicTacToe/Winner")]
        void Winner(Tic_Tac_Toe.TicTacToeService.GameMark winMark);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TicTacToeChannel : Tic_Tac_Toe.TicTacToeService.TicTacToe, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TicTacToeClient : System.ServiceModel.DuplexClientBase<Tic_Tac_Toe.TicTacToeService.TicTacToe>, Tic_Tac_Toe.TicTacToeService.TicTacToe {
        
        public TicTacToeClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TicTacToeClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TicTacToeClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TicTacToeClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TicTacToeClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Register() {
            base.Channel.Register();
        }
        
        public System.Threading.Tasks.Task RegisterAsync() {
            return base.Channel.RegisterAsync();
        }
        
        public void Mark(int x, int y) {
            base.Channel.Mark(x, y);
        }
        
        public System.Threading.Tasks.Task MarkAsync(int x, int y) {
            return base.Channel.MarkAsync(x, y);
        }
        
        public void Reset() {
            base.Channel.Reset();
        }
        
        public System.Threading.Tasks.Task ResetAsync() {
            return base.Channel.ResetAsync();
        }
    }
}
